// ***********************************************************************
//
// Demo program pro vyuku predmetu APPS (02/2022)
// Petr Olivka, katedra informatiky, FEI, VSB-TU Ostrava
// email:petr.olivka@vsb.cz
//
// Priklad pouzit vyvojoveho nastroje K64F-KIT:
// Ovladani zarizeni na sbernici I2C
//
// ***********************************************************************

#include <mbed.h>
#include <stdio.h>
#include <string.h>

#include "i2c-lib.h"
#include "si4735-lib.h"

//************************************************************************

#define R	0b00000001
#define W	0b00000000

#define I2C_writeN( t_n, t_ptr ) I2C_writeNS( ( t_n ), ( t_ptr ), 0 )

uint8_t I2C_writeNS( uint8_t t_on, uint8_t *t_optr, uint8_t t_nostop )
{
	uint8_t l_ack = 0;
	i2c_start();
	for ( uint8_t i = 0; i < t_on; i++ )
		l_ack |= i2c_output( t_optr[ i ] );
		
	if ( !t_nostop )
		i2c_stop();
		
	return l_ack;
}

uint8_t I2C_readN( uint8_t t_on, uint8_t *t_optr, uint8_t t_in, uint8_t *t_iptr )
{
	uint8_t l_ack = I2C_writeNS( t_on, t_optr, 1 );
	i2c_start();
	l_ack |= i2c_output( t_optr[ 0 ] | R );
	if ( !l_ack )
	{
		t_iptr[ 0 ] = i2c_input();
		for ( uint8_t i = 1; i < t_in; i++ )
		{
			i2c_ack();
			t_iptr[ i ] = i2c_input();
		}
		i2c_nack();
	}
	i2c_stop();
	return l_ack;
}

//#pragma pack(1)
union tag
{
	struct
	{
		uint8_t l5:5;
		uint8_t pty:5;
		uint8_t tp:1;
		uint8_t ab:1;
		uint8_t grp:4;
	} __attribute__((packed));
	struct
	{
		uint8_t lo, hi;
	} __attribute__((packed));
	struct
	{
		unsigned int hilo;
	};
};

struct rds_info
{
	uint8_t t8[ 9 ];
	uint8_t t64[ 65 ];
};

#define HWADDR_PC8574 0b01000000
uint8_t _g_pcadr;

uint8_t pc8574_search()
{
	uint8_t l_ack = 1, a;
	for ( a = 0; a < 8; a++ )
	{
		i2c_start();
		l_ack = i2c_output( HWADDR_PC8574 | ( a << 1 ) | W );
		i2c_stop();
		if ( !l_ack ) break;
	}
	if ( l_ack )
	{
		printf( "PC8574 not found!\r\n" );
		return 0;
	}
	return a << 1; 
}

void pc8574_write( uint8_t t_b )
{
	uint8_t l_outb[ 2 ] = { _g_pcadr, t_b };
	I2C_writeN( 2, l_outb );
}

void pc8574_bar( uint8_t t_b )
{
	if ( t_b > 8 ) t_b = 8;
	uint8_t l_m = 0xff >> ( 8 - t_b );
	pc8574_write( l_m );
}

uint8_t fm_tune( int t_freq )
{
	uint8_t l_outb[] = { SI4735_ADDRESS | W, 0x20, 0x00, ( uint8_t ) ( t_freq >> 8 ), ( uint8_t ) ( t_freq & 0xFF ), 0x00 };
	return I2C_writeN( 6, l_outb );
}

uint8_t fm_volume( uint8_t t_vol )
{
	uint8_t l_outb[] = { SI4735_ADDRESS | W, 0x12, 0x00, 0x40, 0x00, 0x00, t_vol };
	return I2C_writeN( 7, l_outb );
}

unsigned int fm_readfreq()
{
	uint32_t t_freq = 0;
	uint8_t l_outb[] = { SI4735_ADDRESS | W, 0x22, 0x00 };
	uint8_t l_inb[ 8 ];
	uint8_t l_ack = I2C_readN( 3, l_outb, 8, l_inb );
	if ( !l_ack )
	{
		t_freq = ( ( uint32_t ) l_inb[ 2 ] ) << 8;
		t_freq |= l_inb[ 3 ];
	}
	return t_freq;
}

uint8_t fm_readRDS( uint8_t *t_rds )
{
	uint8_t l_outb[] = { SI4735_ADDRESS | W, 0x24, 0x00 };
	return I2C_readN( 3, l_outb, 13, t_rds );
}

uint8_t fm_readRSQ( uint8_t *t_resp )
{
	uint8_t l_outb[] = { SI4735_ADDRESS | W, 0x23, 0x00 };
	return I2C_readN( 3, l_outb, 8, t_resp );
}

void fm_clear_rds_info( struct rds_info *t_ri )
{
	for ( uint8_t i = 0; i < 8; i++ )
		t_ri->t8[ i ] = '_';
	for ( uint8_t i = 0; i < 64; i++ )
		t_ri->t64[ i ] = '_';
	t_ri->t8[ 8 ] = 0;
	t_ri->t64[ 64 ] = 0;
}

#define FM_FMIN 8700
#define FM_FMAX 10800
#define FM_FSTEP 5

extern DigitalOut g_led_PTA1;
extern DigitalOut g_led_PTA2;

extern DigitalIn g_but_PTC9;
extern DigitalIn g_but_PTC10;
extern DigitalIn g_but_PTC11;
extern DigitalIn g_but_PTC12;

#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
void demo_i2c( void )
{
	char l_S1, l_S2, l_RSSI, l_SNR, l_MULT, l_CAP;
	char l_ack = 0;

	// inicializace prostredi
	i2c_init();

	printf( "K64F-KIT ready...\r\n\n" );
	
	_g_pcadr = HWADDR_PC8574 | pc8574_search() | W;
	
	if ( ( l_ack = si4735_init() ) != 0 )
		{
			printf( "Initialization of SI4735 finished with error (%d)\r\n", l_ack );
			printf( "Reset KIT!!!\r\n" );
			while ( 1 );
			return;
		}
		else
			printf( "SI4735 initialized.\r\n" );
	
	int32_t l_freq = 10140;
	uint8_t l_vol = 32;
	uint8_t l_check_rds = 0;
	fm_tune( l_freq );
	fm_volume( l_vol );
	uint8_t l_rds[ 13 ];
	uint8_t l_resp[ 32 ];
	struct rds_info l_ri;
	fm_clear_rds_info( &l_ri );
	l_ri.t8[ 8 ] = 0;
	l_ri.t64[ 64 ] = 0;
	
	printf( "\nButtons PTC9-PTC10: Change Frequency, PTC11-PTC12: Change Volume.\r\n\n" );
	printf( "Fr: Current station.\r\n" );
	printf( "PS: Program Service.\r\n" );
	printf( "RT: Radiotext.\r\n\n" );
	
	while ( 1 )
	{
		if ( !g_but_PTC9 ) // ptc9
		{
			l_freq -= FM_FSTEP;
			if ( l_freq < FM_FMIN ) l_freq = FM_FMIN;
			fm_tune( l_freq );
			fm_clear_rds_info( &l_ri );
			l_check_rds = 0;
		}
		if ( !g_but_PTC10 ) // ptc10
		{
			l_freq += FM_FSTEP;
			if ( l_freq > FM_FMAX ) l_freq = FM_FMAX;
			fm_tune( l_freq );
			fm_clear_rds_info( &l_ri );
			l_check_rds = 0;
		}
		if ( !g_but_PTC11 ) // ptc11
		{
			if ( l_vol ) l_vol--;
			fm_volume( l_vol );
		}
		if ( !g_but_PTC12 ) // ptc12
		{
			l_vol++;
			if ( l_vol > 63 ) l_vol = 63;
			fm_volume( l_vol );
		}
				
		int l_curfreq = fm_readfreq();
		while ( l_check_rds )
		{
			if ( !g_but_PTC9 || !g_but_PTC10 || !g_but_PTC11 || !g_but_PTC12 ) break;

			fm_readRDS( l_rds );

			if ( l_rds[ 3 ] == 0 ) break;

			if ( l_rds[ 2 ] & 1 ) // RDS sync
			{
				#define check( c ) ( ( c < ' ' ) ? ' ' : c )
				union tag l_tg;
				l_tg.hi = l_rds[ 6 ];
				l_tg.lo = l_rds[ 7 ];
				if ( l_tg.grp == 0 )
				{
					uint8_t l_inx = ( l_tg.l5 & 0x03 ) * 2;
					l_ri.t8[ l_inx + 0 ] = check( l_rds[ 10 ] );
					l_ri.t8[ l_inx + 1 ] = check( l_rds[ 11 ] );
				}
				if ( l_tg.grp == 2 )
				{
					uint8_t l_inx = ( l_tg.l5 & 0xF ) * 4;
					for ( uint8_t i = 0; i < 4; i++ )
						l_ri.t64[ l_inx + i ] = check( l_rds[ 8 + i ] );
				}
			}
		}
		printf( "Fr: %3d.%02dMHz ", l_curfreq / 100, l_curfreq % 100 );
		printf( "Vol: %2d ", l_vol );
		printf( "PS:'" );
		printf( ( char * ) l_ri.t8 );
		printf( "' " );
		l_ri.t64[ 64 ] = 0;
		strcpy( ( char * ) l_ri.t64 + 32, "..." );
		printf( " RT:'" );
		printf( ( char * ) l_ri.t64 );
		printf( "'\r" );
		fflush( stdout );

		fm_readRSQ( l_resp );
		l_RSSI = l_resp[ 4 ];
		l_SNR = l_resp[ 5 ];
		pc8574_bar( ( ( int32_t ) l_RSSI * 8 ) / 48 );
		g_led_PTA2 = l_resp[ 2 ] & 1;

		l_check_rds = 1;
		wait_us( 100000 );
	}
	// Priklad cteni frekcence aktualne naladene stanice
	i2c_start();
	l_ack |= i2c_output( SI4735_ADDRESS | W );
	l_ack |= i2c_output( 0x22 ); //GET_STATUS
	l_ack |= i2c_output( 0x00 ); //ARG
	i2c_start();
	l_ack |= i2c_output( SI4735_ADDRESS | R );
	l_S1 = i2c_input();
	i2c_ack();
	l_S2 = i2c_input();
	i2c_ack();
	l_freq = ( int32_t ) i2c_input() << 8;
	i2c_ack();
	l_freq |= i2c_input();
	i2c_ack();
	l_RSSI = i2c_input();
	i2c_ack();
	l_SNR = i2c_input();
	i2c_ack();
	l_MULT = i2c_input();
	i2c_ack();
	l_CAP = i2c_input();
	i2c_nack();
	i2c_stop();

	if ( l_ack != 0 )
		printf( "Communication error!\r\n" );
	else
		printf( "Current tuned frequency: %d.%d MHz\r\n",  ( int ) ( l_freq / 100 ), ( int ) ( l_freq % 100 ) );
}



