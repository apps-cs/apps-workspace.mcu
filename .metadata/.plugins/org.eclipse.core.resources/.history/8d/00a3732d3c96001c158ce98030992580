#include "mbed.h"

#include "lcd_lib.h"

extern uint8_t g_font8x8[ 256 ][ 8 ];

//void  SPI_write_data( uint8_t Data );
void  lcd_write_command( uint8_t t_data );
void  lcd_write_data( uint8_t t_data );
void  lcd_write_data_16( uint16_t t_data );
void  lcd_write_data_buf( uint8_t *t_data, uint32_t t_len );

void lcd_single_colour( uint16_t t_color )
{
	uint8_t l_buf[ LCD_WIDTH * 2 ];
	l_buf[ 0 ] = t_color >> 8;
	l_buf[ 1 ] = t_color;
	for ( int i = 1; i < LCD_WIDTH; i++ )
	{
		l_buf[ 2 * i + 0 ] = l_buf[ 0 ];
		l_buf[ 2 * i + 1 ] = l_buf[ 1 ];
	}
	lcd_write_command( 0x2c );
	for ( int i = 0; i < LCD_HEIGHT; i++ )
		lcd_write_data_buf( l_buf, sizeof( l_buf ) );
}

void lcd_rainbow()
{
	int R = 80;
	int R2 = R * R;
	int sx[ 3 ] = { R, LCD_HEIGHT - R, 120 };
	int sy[ 3 ] = { R, R, 0 };
	sy[ 2 ] = ( sx[ 1 ] - sx[ 0 ] ) * 85 / 100 + R;
	uint16_t l_color[ 3 ] = { 0xF800, 0x07E0, 0x001F };
	uint8_t l_buf[ 2 * LCD_WIDTH ];
	lcd_write_command( 0x2c );
	for ( int y = 0; y < LCD_HEIGHT; y++ )
	{
		for ( int x = 0; x < LCD_WIDTH; x++ )
		{
			uint16_t c = 0;
			for ( int i = 0; i < 3; i++ )
			{
				int dx = sx[ i ] - x;
				int dy = sy[ i ] - y;
				int r = dx * dx + dy * dy;
				if ( r < R2 ) c |= l_color[ i ];
			}
			//lcd_write_data_16(c);
			l_buf[ 2 * x ] = c >> 8;
			l_buf[ 2 * x + 1 ] = c;
		}
		lcd_write_data_buf( ( uint8_t * ) l_buf, 640 );
	}
}

void lcd_put_char( int32_t t_x, int32_t t_y, uint8_t t_char, int t_color )
{
    lcd_write_command( 0x2A );
    lcd_write_data_16( t_x );
    lcd_write_data_16( t_x + 7 );

    lcd_write_command( 0x2B );
    lcd_write_data_16( t_y );
    lcd_write_data_16( t_y + 7 );

    lcd_write_command( 0x2C );

    uint8_t *l_font = g_font8x8[ t_char ];
    for ( int r = 0; r < 8; r++ )
    {
    	for ( int s = 0; s < 8; s++ )
    	{
    		if ( l_font[ r ] & ( 1 << s ) ) lcd_write_data_16( t_color );
    		else lcd_write_data_16( 0 );
    	}
    }
    lcd_write_command( 0x2A );
    lcd_write_data_16( 0 );
    lcd_write_data_16( LCD_WIDTH - 1 );

    lcd_write_command( 0x2B );
    lcd_write_data_16( 0 );
    lcd_write_data_16( LCD_HEIGHT - 1 );
}

void demo_lcd()
{ 
	//Reset();
	lcd_init();

	int l_colors[ 5 ] = { 0, 0xffff, 0xf800, 0x07E0, 0x001F };
	while ( 1 )
	{
		for ( int c = 0; c < 5; c++ )
		{
			lcd_write_command( 0x2C );

			lcd_single_colour( l_colors[ c ] );
			wait_us( 500000 );

			lcd_rainbow();
			const char *l_hello = "Hello World!";
			int32_t l_hello_len = strlen( l_hello );

			for ( int i = 0; i < l_hello_len; i++ )
			{
				lcd_put_char( 200 + 9 * i, 200, l_hello[ i ], 0xFFFF );
			}
			wait_us( 1000000 );
		}
	}
}

